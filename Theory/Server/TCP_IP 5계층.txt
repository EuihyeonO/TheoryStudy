

    물리 계충 (Physical Layer)
	   ↓ 		 
 데이터 링크 계층 (DataLink Layer)
	   ↓
  네트워크 계층 (Network Layer)
       ↓
    전송 계층 (Transport Layer)
       ↓
   // 세션 계층 (Session Layer)         
       ↓
   // 표현 계층 (Presentation Layer)     
       ↓
    응용 계층 (Application Layer)     

----------------------------------------------------------------------------------------------------------------------------------------

1. 물리 계층 :
    
    물리적 매체를 통한 송,수신을 담당.
    전기 신호를 비트로, 비트를 전기신호로 형태를 변환함.
    Ex) 허브, 모뎀, 케이블 등..

    전기 신호의 종류 - 디지털, 아날로그

    디지털 : 정확한 0, 1의 값을 지님.
    아날로그 : 0과 1사이의 어느 값을 지님. (0과 1이라 단정할 수 없는 값)
    -> 일반적으로는 디지털 신호를 이용한다.

    전기신호에서 0은 전기가 통하지 않는 상태, 1은 전기가 통하는 상태.
    -> 다만, 전기가 아예 흐르지 않게 하는 것이 현실적으로 어려움
    -> 문턱 전압(기준 전압)을 정의
    EX) 5V 이상이면 1, 5V미만이면 0

    이 뿐만이 아니라, 전압이 몇초간 유지되어야 1로 인식할 것인지도 중요하다.
    이 기준을 주파수로 잡음.
    EX) 1초간 2번진동을 한다면, 11으로 인식한다든가...

    전기신호를 여러 pc에 보내기 위해 허브라는 장치를 사용.
    
    허브 : 입력받은 전기신호를 동일한 신호로 연결된 모든 PC에 보냄.
    ->송신받을 필요가 없는 PC에도 신호를 보내기 때문에 다소 비효율적이다.

    통신단위는 '비트' 이다.

----------------------------------------------------------------------------------------------------------------------------------------

2. 데이터 링크 계층 :

   정보의 오류, 흐름를 관리, 제어하며, 신뢰성있는 정보의 전달을 담당.
   
   상술했듯이, 허브는 다소 비효율적인 신호 전달 구조를 가지고 있을 뿐만 아니, 단방향 통신이기 때문에
   허브에서 데이터를 PC로 전송하는 동안 PC에서도 데이터를 전송하게 되면 충돌이 발생하게 됨.
   -> 이더넷, 스위치의 등장

   이더넷: PC들은 각각 48비트 길이의 MAC주소(고유값)을 지니게 된다. 이 MAC주소를 이용해 데이터를 송,수신할 수 있도록 하는 일종의 규약(프로토콜).
  
   MAC주소는 XX-XX-XX-XX-XX-XX 의 형태로 존재하며, 전 세계에 유일한 주소가 됨.
   앞의 32비트(6자)는 제조사 번호, 뒤의 32비트(6자)는 제품의 일련번호이다.
   16진수로 표현함.

   이더넷에는 헤더라는 개념이 존재.
   헤더: 목적지 MAC주소, 출발지 MAC주소, 이더넷 유형을 담고 있는 데이터 덩어리.
   전송하고자 하는 데이터의 가장 앞에 이더넷 헤더를 붙혀서 전송하게 됨.
   이더넷 유형에는 IPv4, IPv6, RARP등이 있다고 한다..

   트레일러라는 개념도 존재.
   트레일러 : 트레일러는 헤더와 반대로 데이터의 맨 끝에 붙혀서 전송하는 데이터이다.
   데이터가 올바르게 전송되었는지를 판단할 수 있도록 하는 데이터.

   통신단위는 '프레임' 이며 (헤더 + 데이터 + 트레일러)를 프레임이라고 일컫는다.

   MAC주소의 등장과 함께, 허브를 대체하여 스위치라는 장치를 사용하게 됨.
   스위치 : 송신받은 전기에 기록된 MAC주소와 연결된 PC들의 MAC주소를 대응시켜 특정PC에만 신호를 송신하는 기기.

   스위치에는 플러딩과 포워딩이 있다.
   플러딩 : 스위치에는 연결된 PC의 MAC주소를 담는 MAC주소 테이블이 있다.
   이는 연결하면 자동으로 등록되는 것이 아니라, 송신받은 신호에 기록된 목적지MAC주소가 주소테이블에 없다면 연결된 모든PC를 방문하여 확인한 뒤
   해당 주소를 주소테이블에 기록하게 됨.

   포워딩 : 주소테이블에 목적지MAC주소가 있다면, 해당 주소로 신호를 송신하는 것.

   스위치는 송수신이 동시에 가능한 구조이기 때문에, 충돌또한 발생하지 않아 허브보다 여러 방면에서 유리함.
   현대에는 허브를 거의 사용하지 않는다고 한다.
   
   ***ARP라는 것도 있는데, 좀 더 찾아봐야겠다.

----------------------------------------------------------------------------------------------------------------------------------------

3. 네트워크 계층 :

서로 다른 네트워크에 있는 목적지로 데이터를 전송할 수 있도록 함.
서로 다른 네트워크란? 2계층을 기준으로 생각해보면, 서로 다른 스위치에 연결되어 있는 PC라고 생각하면 된다.

스위치에서 PC에 데이터를 보낼 땐, MAC주소를 이용했지만 다른 네트워크엔?
->IP를 이용한다. 데이터에 IP헤더를 붙여서 전송하게 됨.

IP엔 IPv4와 IPv6이 있다.
IPv4 는 흔히 접하는 32비트의 주소 (127.0.0.1 / 255.255.255.255)
IPv6 은 128비트의 주소로 16진수로 이루어짐 (2001:0db8:3c4d:0015:0000:0000:1a2f:1a2b)

IPv4는 과거에 비해 너무 많아진 PC에 모두 고유주소를 부여하기엔 너무 범위가 좁아서 새로 탄생한 프로토콜이 IPv6
기존 인프라와 호환이 잘 안되기 때문에 아직 IPv4를 더 많이 쓴다고 함.

IP주소는 내부적으로 네트워크ID와 호스트ID로 이루어져있고, 그 구성은 IP주소의 클래스에 따라 다르다.

A 클래스 : 대규모 네트워크 주소
앞의 8비트가 네트워크ID, 뒤의 24비트가 호스트ID

B 클래스 : 중형 네트워크 주소
앞의 16비트는 네트워크 ID, 뒤의 16비트가 호스트 ID

C 클래스 : 소형 네트워크 주소
앞의 24비트는 네트워크 ID, 뒤의 8비트가 호스트 ID

D,E도 있는데 멀티캐스트, 연구 등 특수목적이라고 하네요.

네트워크 주소는 작은 그룹의 네트워크 단위를 식별하기 위한 것.
192.168.0.0 ~ 192.168.0.255 의 호스트 범위에선, 190.168.0.0의 주소가 이 전체를 대표하는 네트워크 주소.

브로드캐스트 주소라는 개념도 있는데, 이는 네트워크에 속한 모든 장비에게 한 번에 데이터를 전송하는데 사용되는 IP주소.
이 주소는 바이너리 호스트ID의 맨 앞이 1111로 시작한다.

서브넷이란? 네트워크를 조금 더 작은 단위로 쪼갠 것.
대규모 네트워크에선 브로드캐스트 패킷을 전송할 때 과도한 트래픽이 발생할 수 있다. 
그래서, 목적에 맞게 네트워크를 더 잘게 쪼개서 편리하게 이용하기 위해 서브넷이라는 개념이 도입됨.

네트워크ID, 서브넷ID, 호스트ID를 구분하기 위해 서브넷 마스크라는 방식을 사용한다.

네트워크 계층에서 서로 다른 네트워크를 구분짓기 위해 라우터라는 것이 발생함.
여러개의 PC가 연결된 스위치가 다른 스위치와 송신을 하려면 스위치끼리 연결이 되어야 하는데, 
이러면 서로 다른 네트워크가 아닌 두개의 네트워크가 합쳐진 하나의 네트워크가 되어버린다.

그래서 중간에 라우터라는 기기에 두 스위치를 연결함으로써 두 스위치를 서로 다른 네트워크로 구분짓게 됨.
데이터가 라우터를 통해 특정 네트워크로 송신될 때, 게이트웨이 주소가 필요하게 됨.
이 게이트 위에 주소는 일반적으로 라우터의 IP주소다.

이 계층은 운영체제의 커널에 구현되어있다.

----------------------------------------------------------------------------------------------------------------------------------------

4. 전송 계층 (Transport Layer)
:상위 계층에서 데이터의 유효성, 신뢰성을 검사할 필요가 없도록 신뢰할 수 있는 데이터만을 순차적으로 전달하는 역할.
데이터의 전송 자체는 3계층까지만 있어도 가능하지만, 데이터의 신뢰성을 확보할 수 없다.

또한, 데이터가 컴퓨터 내의 어떤 어플리케이션으로 전송되는지 식별하기 위해서도 전송계층이 필요하다.

전송 계층의 통신 프로토콜 
1. 연결형 통신(TCP)
2. 비연결형 통신(UDP)


연결형 통신
: 신뢰성, 정확성을 강조한 통신 프로토콜.

3-Way 핸드쉐이크, 4-Way 핸드쉐이크 등의 검증과정을 거치기 떄문에 상대적으로 속도는 느리다.
파일 다운로드, 웹 통신 등 정보의 정확성이 중요한 경우에 많이 사용

비 연결형 통신
: 효율성(속도)를 강조한 통신 프로토콜

별도의 검증과정을 거치지 않기 때문에 상대적으로 빠르지만, 데이터의 정확성이 다소 떨어진다.
동영상 스트리밍, 실시간 게임 등에 사용된다.

Ps) 실시간 게임에선 UDP에 TCP의 특성을 섞어서 사용하기도 한다고 함.


3-Way 핸드쉐이크란?

클라이언트 -> 서버로 연결 요청을 보낸다.
서버 -> 클라이언트로 확인 응답과 연결 요청을 다시 보낸다.
클라이언트 -> 서버로 확인 응답을 보낸다.

총 3번의 데이터 전송을 거치며, 모두 끝난 뒤에 Connection이 확인된다.

4-Way 핸드쉐이크란?

클라이언트 -> 서버로 연결 해제 요청을 보낸 뒤 해제 대기상태로 돌입.
서버 -> 클라이언트로 연결 해제 응답을 보내고 서버도 해제 대기상태로 돌입.
연결 해제 준비가 다 되면 서버 -> 클라이언트로 연결 해제 요쳥을 보냄.
클라이언트 -> 서버로 해지 준비 완료 응답을 보낸 뒤 연결이 해제됨.

해제 대기상태를 사용하는 이유가 데드락을 방지하기 위해서라네요
클라이언트가 데이터를 모두 전송하였더라도, 서버에는 전송할 데이터가 남아있을 수 있기 떄문에
이를 처리한 뒤에 연결을 해제하는 방식
예를 들어 라우팅 지연, 패킷 유실 등으로 연결 해제 요청보다 늦게 전송되는 데이터가 존재할 가능성이 있다.


