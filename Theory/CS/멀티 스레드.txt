

멀티 스레드
: 하나의 프로세스를 효율적으로 실행하기 위해, 단일 스레드가 아닌 여러개의 스레드를 활용하는 것.

일반적으로 프로세스는 하나의 스레드로 실행되지만, 프로그래머의 설계에 따라 여러개의 스레드를 활용할 수 있다.
(여기서 스레드는 물리적 스레드와는 다른 개념이며 무한정 생산할 수 있다.)

콘텍스트 스위칭
: 작업을 담당하고 있는 스레드가 바뀌게 될 때, 기존 스레드의 작업 상황을 저장한 뒤 CPU의 레지스터에 있는 데이터를 새로 작업할 스레드의 데이터로 바꾸어야 한다.
이 과정에서 부하가 발생하게 되며, 이 것을 스레드 콘텍스트 스위칭이라고 한다.

프로세스 콘텍스트 스위칭에 비하면 다소 가볍긴 하지만, 오버헤드가 발생한다는 것은 다르지 않다.

스레드를 효율적으로 사용하지 않고 무작정 많이 만들게 되면, 잦은 콘텍스트 스위칭으로 인해 오히려 성능이 저하될 수 있다.
그렇기 때문에 프로그래머는 항상 콘텍스트 스위칭을 염두에 두고 효율적으로 설계해야 한다.

동기화
: 스레드 콘텍스트 스위칭이 프로세스에 비해 가벼운 이유는 힙, 데이터, 코드영역을 서로 공유하기 떄문이다.
하지만, 서로 영역을 공유하기 때문에 치명적인 문제가 존재하게 된다.

각 스레드가 병렬적으로 작업을 처리하다 보면, 동일한 메모리 영역에 여러 개의 스레드가 접근하게 될 가능성이 있다.
이로 인해 의도하지 않은 결과가 도출되거나 치명적인 버그가 발생할 수도 있다.

그렇기 때문에, 여러 스레드가 접근할 가능성이 있는 메모리 영역을 하나의 스레드만 접근할 수 있도록 보호 해야한다.
이렇게 보호하는 일련의 과정을 동기화 라고 한다.

동기화 기법
: 동기화 기법은 여러가지가 있으며, 유저 모드에서 작동하는지 커널 모드에서 작동하는지에 따라 다른 성능을 보인다.
유저 모드에서 작동하는 동기화 기법은 대체로 속도가 빠르지만, 기능이 제한되어 있어 유연하게 사용하는 것이 어렵고 프로세스 간 동기화가 어렵다.
반면, 커널 모드에서 작동하는 동기화 기법은 대체로 속도가 느리지만, 기능상 매우 우수하고 프로세스 간의 동기화가 가능하다는 장점이 있다.

동기화 기법의 종류


///////////////아래 내용 수정, 보강 필요////////////////////

1. 인터락 함수 기반 동기화(유저 모드의 동기화)

CPU에 신호를 보내 메모리 영역에 대한 동기화를 진행한다. 특정 메모리 영역에 대해 원자적인 연산을 보장함으로써 동기화를 달성한다.
전역함수로 선언된 하나의 변수를 동기화 하는 등 단순한 메모리를 동기화 할 때 유용하다.

커널 모드로의 전환이 발생하지 않아 다른 동기화 기법에 비해 매우 빠른 편이다.

2. 크리티컬 섹션 기반 동기화(유저 모드의 동기화)

하나의 스레드가 데이터 영역에 접근한 이후 해당 영역을 벗어나기 전에 다른 스레드가 접근할 수 없도록 운영체제의 스케줄링을 제한하는 것.
크리티컬 섹션 객체를 Enter 하게 되면, 객체가 Leave하기 전까지 다른 스레드가 해당 메모리 영역에 접근하지 못하도록 함.

커널 모드로의 전환이 발생하지 않기 때문에 성능상의 이점이 있으나, 프로세스 간의 스레드 전환이 필요한 상황에선 사용할 수 없는 기법이다.

3. 세마포어 (커널 모드의 동기화)

유저 모드의 동기화 방식이 매우 빠른 반면에, 프로세스 간의 스레드 동기화는 불가능하기 때문에 세마포어 방식을 활용하게 된다.
특정 메모리 영역에 여러 개의 스레드를 할당한 후, 하나의 스레드가 작업을 완료하게 되면 기존에 할당된 스레드 중 하나가 작업을 진행하도록 한다.
스레드가 작업을 마칠 때마다 새로 스레드를 할당하여 대기하게 함.

4. 뮤텍스 (커널 모드의 동기화)

세마포어 방식중 단 1개의 스레드를 할당하는 경우를 뮤텍스라고 한다. 뮤텍스의 경우에는 스레드가 뮤텍스 객체를 소유할 수 있다.
프로세스 간의 동기화를 하기 위해서는 뮤텍스에 이름을 붙여 프로세스 간 접근할 수 있도록 한다.

5. 이벤트 기반의 동기화 (커널 모드의 동기화)

세마포어, 뮤텍스의 경우엔 임계영역 진입시 signaled상태가 되고 영역을 벗어나게 되면 자동으로 non-signaled 상태가 되지만
이벤트 방식을 활용하면 자동으로 non-signaled 상태가 되지 않고 ResetEvent가 호출되는 순간 non_signaled상태가 된다.
문자열의 입력을 대기한 후, 입력이 끝나면 출력을 하는 것과 같이 순서가 중요한 경우에 활용하는 방식이다.

6. 스핀 락 (커널 모드의 동기화)

