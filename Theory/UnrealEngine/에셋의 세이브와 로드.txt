

게임 제작 과정에서 에셋간의 연결을 위해 패키지를 메모리에 올려서 할당하는 것은 비용이 너무 비싸다.
(에셋 간의 연결이란, 매쉬에 머티리얼을 입힌다든가.. 애니메이션을 만든다든가..)

패키지를 직접 로딩하는 것 대신에, 패키지와 오브젝트를 지정한 문자열을 사용하여 로딩한다. 
-> 오브젝트 경로라고 함.

오브젝트 경로는 프로젝트 내에서 중복되지 않고 유일성을 보장받는다.
->오브젝트 간의 연결도 유일한 오브젝트 경로로 표현이 가능.

오브젝트 경로는 {에셋 클래스 정보}'{패키지 이름}.{에셋 이름}' 으로 구성되어 있고
맨 앞의 에셋 클래스 정보는 생략이 가능하도록 되어있다.
-> 패키지 이름과 에셋 이름만 알면 필요한 에셋만 개별적으로 로딩이 가능하다.`

------------------------------------------------------------------------------------------

오브젝트 경로 참조 방식

1. UPROPERTY()
이 방식을 이용하여 블루프린트에서 에셋 설정시, 에디터가 대상 경로를 참조하여 로드하게 된다.

2. 코드를 통해 생성자에서 참조하는 방식
로드할 에셋의 경로를 정확히 알고 있다면, ConstructorHelper 클래스를 통해 생성자에서 로드할 수 있다.

3.런타임에서 동기, 비동기적으로 로딩
에셋 스트리밍 관리자를 이용하여 로딩에 관한 로직을 설계한다.

------------------------------------------------------------------------------------------

에셋 스트리밍 관리자
: 에셋의 비동기 로딩을 지원하는 관리자 객체

콘텐츠 제작에 무관한 싱글톤 클래스에 선언해두는 것을 권장한다.
GameInstance에 선언하는 것도 좋다.

const FString TopSoftObjectPath = FString::Printf(TEXT("%s.%s"), *PackageName, *AssetName);
Handle = StreamableManager.RequestAsyncLoad(TopSoftObjectPath,
	[&]()
	{
		if (Handle.IsValid() && Handle->HasLoadCompleted())
		{
			UStudent* TopStudent = Cast<UStudent>(Handle->GetLoadedAsset());
			if (TopStudent != nullptr)
			{
				PrintStudentInfo(TopStudent, TEXT("AsyncLoad"));

				Handle->ReleaseHandle();
				Handle.Reset();
			}
		}
	});

이처럼 핸들과 오브젝트 경로를 이용하여 에셋을 로드한다.
