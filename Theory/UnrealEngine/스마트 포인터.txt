

언리얼 엔진은 일반적으로 가비지 콜렉터가 스마트 포인터와 유사한 방식으로 메모리 관리를 해주기 떄문에
굳이 Shared_ptr을 사용할 필요는 없다.
다만, 레퍼런스 카운트를 이용하는 만큼 TWeakObjectPtr을 활용하여 안전하게 참조관리를 해주는게 좋다.

또한, UObject를 상속받지 않는 클래스, 구조체 등은 가비지 콜렉터가 알아서 관리해주지 않기 떄문에
new, delete를 프로그래머가 직접 해주어야 하기 때문에 이러한 타입에선 스마트 포인터를 활용하는 것이 좋다.


언리얼 엔진의 스마트 포인터 :

TSharedPtr -> C++ 의 std::shard_ptr 이다.

TWeakPtr -> C++ 의 std::weak_ptr 이다.

TWeakObjectPtr -> 언리얼 오브젝트용 WeakPtr이다. 상술했듯이 언리얼 오브젝트가 가비지 컬렉터에 의해 관리되다고 하더라도
순환참조에서 자유롭지는 못하기 때문에 UObject용 WeakPtr을 따로 제공하고 있다.

TUniquePtr -> C++의 std::unique_ptr 이다.

언리얼 엔진의 스마트 포인터는 c++과 동일하게
비 침범형이다.

즉, 오브젝트가 스스로 스마트 포인터의 소유 아래에 있다는 것을 확인하기 위해서는 TSharedFromThis<> 를 상속받아야 한다.
이를 상속받게 되면, this를 반환할 때, SharedThis()나 AsShared()의 함수로 스마트 포인터 타입으로 반환이 가능하다. 
(참고로SharedThis나 AsShared는 생성자에서 호출하면 안된다... 이 땐 객체가 완전히 생성되기 전이라 오류가 난다)

언리얼 엔진 스마트 포인터의 형변환 :

업캐스팅(상위 클래스로의 형변환)은 C++과 동일하게 묵시적이다. (그냥 쓰면 됨)
다운 캐스팅(하위 클래스로의 형변환)은 StaticCastSharedPtr, StaticCastWeakPtr을 쓰면 된다.
RTTI(런타임 타입 정보)는 없기 떄문에, 동적 형변환은 안된다. 무조건 컴파일 타임에 변환이 되어야 함.
RTTI가 없는 이유는 최적화 때문이라네요.

ConstCastSharedPtr, ConstCastWeakPtr등 Const 타입으로 캐스팅도 가능.

스레드 안정성 :

일반 스마트 포인터는 여러 스레드가 접근할 때 안정성을 보장할 수 없기 때문에
만약 멀티 스레드 환경에서 참조되는 변수라면

TSharedPtr<T, ESPMode::ThreadSafe>
TSharedRef<T, ESPMode::ThreadSafe>
TWeakPtr<T, ESPMode::ThreadSafe>
TSharedFromThis<T, ESPMode::ThreadSafe>

이런 식으로 안정성을 보장할 수 있다. 다만, 속도가 그냥 스마트 포인터보다 느리니까
확실하게 여러 스레드가 접근할 것 같은 애들한테만 쓰자.

권장 사항 :
void Test(TSharedPtr<int32> _Data) 대신에
void Test(const TSharedPtr<const int32>& _Data) 와 같은 참조타입으로 선언하자.
참조형이 아닌 값으로 인자에 보내게 되면, 임시 객체 생성과정에서 불필요한 참조카운팅으로 인한 오버헤드가 발생하기 때문.
