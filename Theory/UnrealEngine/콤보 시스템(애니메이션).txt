
구현한 기능
: 키입력이 연속될 경우, 추가적인 공격 애니메이션이 발생하도록 하는 기능을 구현.
(공격 기능은 배제하고 애니메이션 기능만 구현)

활용한 기능
1. 데이터 에셋
2. 애니메이션 몽타주

구현한 방법

1. 애니메이션 몽타주 에디터에서 공격 모션 4가지를 순서대로 배치하여 저장하였다.
2. 플레이어의 클래스를 상속받는 블루프린트 클래스를 생성한 뒤, 멤버변수로 선언된 애니메이션 몽타주에 생성해놓은 몽타주를 연결한다.
3. 데이터 에셋에 멤버변수로 기준 프레임을 담는 벡터를 선언해 놓았고, 이 벡터를 이용하여 콤보 공격이 발동될 것인가 말 것인가를 결정하도록 함.
(예를 들어, 인덱스 0번의 값이 17이라면, 첫 번째 애니메이션의 17프레임 이전에 키 입력시 들어왔을 때 콤보를 발동하도록 하였다.)
4. 키 입력이 추가로 발생하여 콤보를 발동해야 하는 경우엔, 현재 애니메이션을 바꿔준 뒤 델리게이트와 언리얼 엔진의 타이머를 이용하여 다음 콤보에 대한 함수를 등록해주었다.

------------------------------------------------------------------------------------------------------------------------

//멤버변수로 애니메이션 몽타주를 선언함

UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = Animation)
TObjectPtr<class UAnimMontage> ComboActionMontage;

//데이터 에셋에 콤보 발생 여부의 기준이 되는 프레임을 담는 벡터를 선언함

UPROPERTY(EditAnywhere, Category = ComboData)
TArray<float> EffectiveFrameCount;

//공격 키입력이 들어온다면
//최초엔 초기화 함수를 실행한다.
//현재 Combo카운트가 0이 아니라면 (공격이 진행중이라면), 타이머가 발동중인 경우 HasNextComboCommand를 true로 만들어 다음 콤보가 발동되도록 하였다.

void AABCharacterBase::ProcessComboCommand()
{
	if (CurrentCombo == 0)
	{
		ComboActionBegin();
		return;
	}

	if (!ComboTimerHandle.IsValid())
	{
		HasNextComboCommand = false;
	}
	else
	{
		HasNextComboCommand = true;
	}
}

//첫 키입력을 받았을 때 실행하는 초기화 함수

void AABCharacterBase::ComboActionBegin()
{
	//콤보가 시작되었으니 인덱스를 1로 변경
	CurrentCombo = 1;

	//플레이어가 이동하지 않는 상태로 만들어줌.
	GetCharacterMovement()->SetMovementMode(EMovementMode::MOVE_None);

	//애니메이션 몽타주를 시작한다.
	const float AttackSpeedRate = 1.0f;
	UAnimInstance* AnimInstance = GetMesh()->GetAnimInstance();
	AnimInstance->Montage_Play(ComboActionMontage, AttackSpeedRate);

	//애니메이션 몽타주가 종료될 때 실행될 함수를 델리게이트에 바인딩.
	FOnMontageEnded EndDelegate;
	EndDelegate.BindUObject(this, &AABCharacterBase::ComboActionEnd);
	AnimInstance->Montage_SetEndDelegate(EndDelegate, ComboActionMontage);

	//타이머 핸들을 한 번 무효화 한 뒤, 다음 콤보의 실행 여부를 조사하기 위해 타이머 함수를 세팅.
	ComboTimerHandle.Invalidate();
	SetComboCheckTimer();
}

//다음 콤보 실행 여부를 조사하기 위한 타이머 함수를 세팅
void AABCharacterBase::SetComboCheckTimer()
{
	int32 ComboIndex = CurrentCombo - 1;
	ensure(ComboActionData->EffectiveFrameCount.IsValidIndex(ComboIndex));

	const float AttackSpeedRate = 1.0f;
	float ComboEffectiveTime = (ComboActionData->EffectiveFrameCount[ComboIndex] / ComboActionData->FrameRate) / AttackSpeedRate;

	//다음 콤보가 실행되어야 하는 시간에, 콤보 실행 여부를 조사하도록 타이머 세팅. 
	//시간이 타이머로 세팅되어 있고, 정해진 시간에 콤보 여부를 조사하기 떄문에 다음 콤보는 동일한 프레임에 발생하게 된다.
	//키 입력이 빨리 들어온다고 다음 콤보가 빨리 실행되는 것은 아니라는 뜻.

	//데이터 에셋에 선언된 벡터의 마지막 인덱스는 -1로 설정해두었기 때문에
	//애니메이션 몽타주의 마지막 섹션에선 타이머를 세팅하지 않는다.
	if (ComboEffectiveTime > 0.0f)
	{
		GetWorld()->GetTimerManager().SetTimer(ComboTimerHandle, this, &AABCharacterBase::ComboCheck, ComboEffectiveTime, false);
	}
}

//콤보 실행 여부 조사
void AABCharacterBase::ComboCheck()
{
	//일단 기존의 타이머를 무효화 한다.
	ComboTimerHandle.Invalidate();
	
	//키 입력이 들어왔다면, ProcessComboCommand()함수로 인해 HasNextCombo는 true가 되어있을 것이다.
	if (HasNextComboCommand)
	{
		UAnimInstance* AnimInstance = GetMesh()->GetAnimInstance();

		//애니메이션 몽타주의 다음 섹션을 실행한다.
		CurrentCombo = FMath::Clamp(CurrentCombo + 1, 1, ComboActionData->MaxComboCount);
		FName NextSection = *FString::Printf(TEXT("%s%d"), *ComboActionData->MontageSectionNamePrefix, CurrentCombo);
		AnimInstance->Montage_JumpToSection(NextSection, ComboActionMontage);

		//다음 콤보에 대한 타이머 생성.
		SetComboCheckTimer();
		HasNextComboCommand = false;
	}
}

//콤보가 끝나면
//다시 세팅을 돌려놓는다.

void AABCharacterBase::ComboActionEnd(UAnimMontage* TargetMontage, bool IsProperlyEnded)
{
	ensure(CurrentCombo != 0);
	CurrentCombo = 0;
	GetCharacterMovement()->SetMovementMode(EMovementMode::MOVE_Walking);
}

