

특정 클래스를 다른 클래스에서 상속받게 된다면,
부모 클래스의 소멸자는 반드시 virtual 키워드를 붙혀 가상함수로 선언해야 한다.

이유를 알기 위해선 멤버 함수 호출의 흐름을 알아야 한다.

자식 클래스의 멤버 함수가 호출되면, 일반적으로 메서드 검색은 부모 클래스부터 시작된다. 
부모 클래스에서 해당 메서드를 찾게 되면, 먼저 그 메서드가 virtual인지를 조사하고, 만약 virtual이라면 가상 함수 테이블을 참조하게 된다.
자식 클래스에서 해당 함수가 재정의(오버라이딩)되었다면, 가상 함수 테이블에는 자식 클래스의 메서드가 등록되어 있으므로 부모 클래스의 함수 대신에 자식 클래스의 메서드가 실행된다.

이 흐름을 생각해보았을 때, 동일한 이름의 메서드에 대해서 virtual 선언하지 않았다면
자식 함수에서 오버라이딩 했음에도 불구하고 부모클래스의 함수가 호출될 수 있는 문제가 발생한다.

이 것이 일반적인 상황에서는 단순히 함수가 다르게 호출되는 정도의 문제일 수 있지만
소멸자의 경우는 조금 더 문제가 될 수 있다.

소멸자도 상속관계에서 오버라이딩된 함수다. 객체가 소멸되는 과정에서 먼저 부모클래스의 소멸자를 호출하게 될 것이다.
그리고 소멸자가 virtual이라면, 자식 클래스로 넘어가서 자식 객체의 소멸자를 호출하게 될 것이다.
즉 소멸 순서는 자식 -> 부모 순서로 올바르게 소멸이 될 것이다.

반면, virtual 키워드를 선언하지 않았을 경우에는 부모의 소멸자가 먼저 호출이 되고, 부모 클래스가 소멸하면서 
자식 클래스의 소멸자는 누구도 호출해주지 않게 된다. 즉, 메모리 누수 등의 문제가 발생할 수 있는 것이다.

이 때문에, 소멸자는 자식->부모 순으로 올바르게 실행되어야 하며 이를 보장하기 위해 virtual 키워드를 붙여야 하는 것이다.