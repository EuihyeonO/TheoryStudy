

오버 로딩 : 이름이 동일한 메서드를 매개변수의 타입, 개수, 순서 등을 바꿔 다양한 형태로 정의하는 것.

예를 들어, 캐릭터를생성하는 함수를 만든다고 가정해보자.
이 때 몇 가지 상황이 발생할 수 있다.

1. 플레이어가 1레벨에 아무 장비도 착용하지 않은 상태로 생성된다.
2. 플레이어가 특정 레벨을 가지며, 특정 장비를 착용한 채로 생성된다. (로드 혹은 치트 캐릭터)

이 경우 오버로딩을 사용하지 않는다면,
bool CreateDefaultCharacter(std::string _Name)
{
	//레벨 1, 장비는 nullptr 등등..
}

bool CreateLoadedCharacter(std::string _Name, uint32 _Level, Armor _LoadArmor)
{
	//레벨 대입하고 아머 객체 대입하고 등등..
}

이렇게 두개의 함수를 정의할 수 있을 것이다.

하지만, 상황이 좀 더 다양해져서 더 많은 캐릭터 생성 함수를 정의해야 한다면 매번 새로운 이름을 짓는 것도 상당히 번거로운 일이며
호출할때마다 함수의 이름을 찾는 것도 다소 번거로울 것이다.

이러한 번거로움을 해결하기 위해 C++에서 지원해주는 문법이 오버로딩이다.
오버로딩을 활용하면

bool CreateCharacter(std::string _Name){//이러쿵 저러쿵}
bool CreateCharacter(std::string _Name, uint32 _Level, Armor _LoadArmor){ //어쩌구 저쩌구 }

이와 같이 동일한 함수 명에 인자만 바꿔서 다르게 정의할 수 있다.
하지만, 무분별한 오버로딩은 오히려 불편함을 증가시킬 수 있기 때문에 적절하게 사용하는 것이 중요하다.

메서드의 이름만으로 정확한 기능을 구별하기가 힘들고, 오버로딩을 많이 하게 되면 코드가 너무 복잡해질 수 있다.
그렇기 떄문에, 인자 타입만 보고 어떠한 식으로 기능을 다르게 구현 했는지 정확히 추론이 가능한 경우에 사용하는 것이 좋다.

또한, 가끔 인자를 다르게 설정했음에도 컴파일러에서 메서드를 구분하지 못하는 경우도 있다. (이러한 경우에는 매개변수의 순서를 바꿔보는 것이 도움이 된다고 한다.)

---------------------------------------------------------------------------------------------------------

오버 라이딩 : 상속 관계에서 부모 클래스의 메서드를 자식 클래스에서 새롭게 정의하는 것.

플레이어의 공격 함수를 만들고자 할 때 다음과 같은 두가지 상황이 발생할 수 있다.

1. 플레이어가 전사인 경우.
2. 플레이어가 도적인 경우.

무기가 달라짐에 따라 공격을 하는 함수의 로직도 서로 다를 것이다.

오버라이딩을 사용하지 않고 기능을 구현하게 되면,
WarriorPlayer->Attack();
ThiefPlayer->Attack();
이렇게 두 개의 객체를 만들어, 각각의 객체가 가진 attack() 함수를 호출하면 구현할 수 있을 것이다.
하지만 이러한 경우에는 플레이어의 공격 함수를 호출할 때마다 플레이어의 직업에 맞는 객체를 확인한 뒤 Attack함수를 호출하는 번거로운 과정이 필요하다.

하지만 상속과 오버라이딩을 활용하게 되면,
WarriorPlayer, ThiefPlayer 클래스가 각각 Player 클래스를 상속받게 되고, 
Player 클래스에 Attack() 함수를 선언해놓은 뒤 이를 자식 클래스인 WarriorPlayer, ThiefPlayer 클래스에서 직업에 맞게 각각 정의하게 된다면
Player->Attack() 를 호출했을 때, Player의 Attack이 아니라 각각의 자식클래스에서 재정의 된 Attack()이 호출되게 된다.

즉, 자식 클래스의 정확한 타입을 파악하는 번거로운 과정이 없어도 외부에서는 부모 클래스만 알고 있다면 해당 부모 클래스를 상속받은 여러 객체를 활용할 수 있는 것이다.


또한, 부모 클래스에 정의된 함수에 추가적인 기능을 붙히고 싶을 때
오버라이딩한 함수 내부에서 부모 클래스의 함수를 한 번 호출한 뒤, 추가적인 기능을 실행하도록 하면
동일한 코드를 반복해서 작성할 필요 없이 매우 간단하게 기능을 추가하는 것이 가능하다.
